# service: selenium-lambda
service: mail-file-checker


custom:
  stage: ${opt:stage, self:provider.stage}
  region: ${opt:region, self:provider.region}
  snsTopic: "InitTrigger"
  holdingBucket: "processing-lambda-logic"



provider:
  name: aws
  runtime: python3.6
  memorySize: 1024 # optional, in MB, default is 1024. 128-3008MB range
  timeout: 900
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage,'dev'}
  apiKeys: 
    - ${opt:key, 'api_key'}
  iamRoleStatements:
    - Effect: "Allow"
      Resource: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.snsTopic}" ] ]  }
      Action:
        - "sns:*"
  iamManagedPolicies:
    - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"



functions:
  mailFileCheck:
    environment:
      aws_access_key_id: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_access_key_id}
      aws_secret_access_key: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_secret_access_key}
      aws_region: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_region}
      s3_access_key_id: ${file(../config/env-var/aws-s3-legacy-access.json):aws_access_key_id}
      s3_secret_access_key: ${file(../config/env-var/aws-s3-legacy-access.json):aws_secret_access_key}
      holding_bucket: ${self:custom.holdingBucket}
    handler: main.endpoint
    package:
      exclude:
        - publish.py
        - results.py
    layers: # Reference CloudFormation Outputs
      - ${cf:selenium-layer-${opt:stage, 'beta'}.SeleniumLayerExport}
      - ${cf:selenium-layer-${opt:stage, 'beta'}.ChromedriverLayerExport}
      - ${cf:pandas-layer-${opt:stage, 'beta'}.PandasLayerExport}
      - ${cf:other-requirements-${opt:stage, 'beta'}.OtherRequirementsLayerExport}
    timeout: 900 # optional, in seconds, default is 6
    memorySize: 3008 # optional, in MB, default is 1024. 128-3008MB range
    events:
      - sns: ${self:custom.snsTopic}
        # arn: !Ref Trigger
        # topicName: InitTrigger


  snsLambdaPublisher:
    handler: publish.handler
    package:
      individually: true
      exclude:
        - func/**
        - lib/run_filters.py
        - main.py
        - results.py
    layers: # Reference CloudFormation Outputs
      - ${cf:other-requirements-${opt:stage, 'beta'}.OtherRequirementsLayerExport}
    environment:
      aws_access_key_id: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_access_key_id}
      aws_secret_access_key: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_secret_access_key}
      aws_region: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_region}
      holding_bucket: ${self:custom.holdingBucket}
      sns_topic: ${self:custom.snsTopic}
      sns_topic_arn: { "Fn::Join" : [":", ["arn:aws:sns:${self:custom.region}", { "Ref" : "AWS::AccountId" }, "${self:custom.snsTopic}" ] ]  }
    events:
      - http:
          path: ${opt:publish, 'V1/publish'} # sls deploy --path RM
          method: get
          cors: true
          private: true
          integration: lambda
          memorySize: 128 # optional, in MB, default is 1024. 128-3008MB range
          request:
            template:
              application/json: >
                {
                  "dropID" : "$input.params('dropID')",
                  "rebuild" : "$input.params('rebuild')"
                }

  getResults:
    handler: results.handler
    package:
      individually: true
      exclude:
        - func/**
        - lib/run_filters.py
        - main.py
        - publish.py
    layers: # Reference CloudFormation Outputs
      - ${cf:other-requirements-${opt:stage, 'beta'}.OtherRequirementsLayerExport}
      - ${cf:pandas-layer-${opt:stage, 'beta'}.PandasLayerExport}
    environment:
      aws_access_key_id: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_access_key_id}
      aws_secret_access_key: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_secret_access_key}
      aws_region: ${file(../config/env-var/aws-${opt:env, 'lab'}.json):aws_region}
      s3_access_key_id: ${file(../config/env-var/aws-s3-legacy-access.json):aws_access_key_id}
      s3_secret_access_key: ${file(../config/env-var/aws-s3-legacy-access.json):aws_secret_access_key}
      holding_bucket: ${self:custom.holdingBucket}
    events:
      - http:
          path: ${opt:result, 'V1/results'} # sls deploy --path RM
          method: get
          cors: true
          private: true
          integration: lambda
          memorySize: 128 # optional, in MB, default is 1024. 128-3008MB range
          request:
            template:
              application/json: >
                {
                  "dropID" : "$input.params('dropID')"
                }



# resources:
#   Resources:
#     Trigger:
#       Type: AWS::SNS::Topic
#       Properties:
#         DisplayName: Send message to mailFileChecker
#         TopicName: InitTrigger
